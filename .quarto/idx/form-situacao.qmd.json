{"title":"Formulário de Situação (Categorias + O/A)","markdown":{"yaml":{"title":"form-situacao","format":"html"},"headingText":"page-layout: full","containsRefs":false,"markdown":"\n\n---\ntitle: \"Formulário de Situação (Categorias + O/A)\"\nformat: html\ntoc: false\nexecute:\n  eval: false\n\n```{=html}\n<style>\n  .card { border: 1px solid #e5e7eb; border-radius: 14px; padding: 16px; margin: 12px 0; box-shadow: 0 2px 8px rgba(0,0,0,.04); }\n  .row { display: grid; grid-template-columns: 1fr 1fr; gap: 16px; }\n  .stack { display: flex; flex-direction: column; gap: 8px; }\n  .muted { color: #6b7280; font-size: .95rem; }\n  .grid-cat { display: grid; grid-template-columns: repeat(auto-fill, minmax(260px, 1fr)); gap: 12px; }\n  .cat { border: 1px solid #e5e7eb; border-radius: 12px; padding: 10px; }\n  .cat h4 { margin: 0 0 6px 0; font-size: 1rem; }\n  .list { display: grid; grid-template-columns: 1fr; gap: 6px; max-height: 300px; overflow: auto; padding-right: 4px; }\n  .item { display: flex; align-items: center; gap: 8px; }\n  .badge { font-size: 0.75rem; border-radius: 9999px; padding: 2px 7px; border: 1px solid transparent; }\n  .badge.O { background: #e7f7ef; color: #065f46; border-color: #bef0d2; }  /* Trafor (O) - verde */\n  .badge.A { background: #fde8e8; color: #7f1d1d; border-color: #f9caca; }  /* Trafar (A) - vermelho */\n  .name { flex: 1; }\n  .actions { display: flex; gap: 8px; flex-wrap: wrap; }\n  button { border: 1px solid #e5e7eb; background: #fff; padding: 8px 12px; border-radius: 10px; cursor: pointer; }\n  button.primary { background: #111827; color: #fff; }\n  textarea { width: 100%; min-height: 80px; }\n  input[type=\"number\"] { width: 140px; }\n  .pill { display:inline-block; padding:2px 8px; border-radius:9999px; border:1px solid #e5e7eb; margin:2px; }\n  .small { font-size: .9rem; }\n</style>\n\n<div class=\"card\">\n  <h2>Parte 1 — Formulário</h2>\n  <p class=\"muted\">Selecione traços por <b>categoria</b>. Trafors (O) e Trafars (A) aparecem misturados, com indicação visual.</p>\n\n  <div class=\"row\">\n    <div class=\"stack\">\n      <label class=\"label\" for=\"pergunta\"><b>Número da situação</b></label>\n      <input id=\"pergunta\" type=\"number\" min=\"1\" step=\"1\" placeholder=\"ex.: 57\">\n    </div>\n    <div class=\"stack\">\n      <label class=\"label\" for=\"pontuacao\"><b>Pontuação (0–20)</b></label>\n      <input id=\"pontuacao\" type=\"number\" min=\"0\" max=\"20\" step=\"1\" placeholder=\"ex.: 4\">\n    </div>\n  </div>\n\n  <div class=\"stack\" style=\"margin-top:12px;\">\n    <label class=\"label\" for=\"descricao\"><b>Descrição da situação</b> (opcional)</label>\n    <textarea id=\"descricao\" placeholder=\"Descreva a situação...\"></textarea>\n  </div>\n\n  <div class=\"stack\" style=\"margin-top:16px;\">\n    <div class=\"label\"><b>Seleção por categoria</b></div>\n    <div id=\"cats\" class=\"grid-cat\" aria-live=\"polite\"></div>\n  </div>\n\n  <div class=\"actions\" style=\"margin-top:12px;\">\n    <button class=\"primary\" id=\"gerar\">Gerar saída</button>\n    <button id=\"limpar\">Limpar seleção</button>\n  </div>\n</div>\n\n<div class=\"card\">\n  <h2>Parte 2 — Saída</h2>\n\n  <div class=\"stack\">\n    <div class=\"label\">Linha CSV</div>\n    <textarea id=\"csv-output\" readonly placeholder=\"pergunta,pontuacao,trafores,trafares\"></textarea>\n    <div class=\"actions\">\n      <button id=\"copiar\">Copiar CSV</button>\n      <button id=\"baixar\">Baixar CSV</button>\n    </div>\n  </div>\n\n  <div class=\"stack\" style=\"margin-top:12px;\">\n    <div class=\"label\">Descrição textual</div>\n    <div id=\"texto-output\" class=\"small muted\">A descrição aparecerá aqui.</div>\n  </div>\n\n  <div class=\"stack\" style=\"margin-top:12px;\">\n    <div class=\"label\">Seleções (pré-visualização)</div>\n    <div id=\"preview-tags\" class=\"small\"></div>\n  </div>\n</div>\n\n<script>\n/** CSV utils **/\nfunction parseCSV(text) {\n  // Simples: separa por linhas e vírgulas (sem aspas internas nos dados).\n  const lines = text.split(/\\r?\\n/).map(l => l.trim()).filter(Boolean);\n  if (!lines.length) return [];\n  const header = lines[0].split(\",\").map(h => h.trim().toLowerCase());\n  return lines.slice(1).map(line => {\n    const cols = line.split(\",\"); // assume sem vírgulas nos nomes/categorias\n    const obj = {};\n    header.forEach((h, i) => obj[h] = (cols[i] ?? \"\").trim());\n    return obj;\n  });\n}\n\nfunction csvEscapeField(s) {\n  if (s == null) return \"\";\n  const needsQuotes = /[\",\\n]/.test(s);\n  let out = String(s).replace(/\"/g, '\"\"');\n  return needsQuotes ? `\"${out}\"` : out;\n}\n\nfunction generateCSVLine({ pergunta, pontuacao, traforesIds, trafaresIds }) {\n  const traforesStr = traforesIds.join(\",\");\n  const trafaresStr = trafaresIds.join(\",\");\n  return [\n    csvEscapeField(pergunta),\n    csvEscapeField(pontuacao),\n    csvEscapeField(traforesStr),\n    csvEscapeField(trafaresStr)\n  ].join(\",\");\n}\n\nfunction downloadText(filename, content) {\n  const blob = new Blob([content], { type: \"text/csv;charset=utf-8\" });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement(\"a\");\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n  URL.revokeObjectURL(url);\n  a.remove();\n}\n\n/** UI helpers **/\nfunction renderCategories(container, grouped) {\n  container.innerHTML = \"\";\n  const catOrder = [\"SOMA\",\"BIOENERGÉTICA\",\"ANTIEMOCIONALIDADE\",\"INVULGARIDADE\",\"LIDERANÇA\",\"COMUNICABILIDADE\",\"PRIORIZAÇÃO\",\"COERÊNCIA\",\"CONSCIENCIALIDADE\",\"UNIVERSALIDADE\",\"OUTROS\"];\n  catOrder.forEach(cat => {\n    const items = grouped[cat];\n    if (!items || !items.length) return;\n    const box = document.createElement(\"div\");\n    box.className = \"cat\";\n    const h = document.createElement(\"h4\");\n    h.textContent = cat;\n    box.appendChild(h);\n    const list = document.createElement(\"div\");\n    list.className = \"list\";\n    items.forEach(item => {\n      const id = `t-${item.id}`;\n      const row = document.createElement(\"label\");\n      row.className = \"item\";\n      row.setAttribute(\"for\", id);\n\n      const cb = document.createElement(\"input\");\n      cb.type = \"checkbox\";\n      cb.id = id;\n      cb.value = item.id;\n      cb.dataset.tipo = item.tipo; // 'O' ou 'A'\n      cb.dataset.nome = item.nome;\n      cb.dataset.categoria = item.categoria;\n\n      const badge = document.createElement(\"span\");\n      badge.className = `badge ${item.tipo}`;\n      badge.textContent = item.tipo; // O ou A\n\n      const span = document.createElement(\"span\");\n      span.className = \"name\";\n      span.textContent = `${item.id} — ${item.nome}`;\n\n      row.appendChild(cb);\n      row.appendChild(badge);\n      row.appendChild(span);\n      list.appendChild(row);\n    });\n    box.appendChild(list);\n    container.appendChild(box);\n  });\n}\n\nfunction getSelections() {\n  const checked = Array.from(document.querySelectorAll('#cats input[type=\"checkbox\"]:checked'));\n  const trafores = [];\n  const trafares = [];\n  const namesO = [];\n  const namesA = [];\n  checked.forEach(cb => {\n    const id = parseInt(cb.value, 10);\n    const tipo = cb.dataset.tipo;\n    const nome = cb.dataset.nome;\n    if (tipo === \"O\") { trafores.push(id); namesO.push(nome); }\n    else { trafares.push(id); namesA.push(nome); }\n  });\n  trafores.sort((a,b)=>a-b);\n  trafares.sort((a,b)=>a-b);\n  return { trafores, trafares, namesO, namesA };\n}\n\nfunction renderPreview(namesO, namesA) {\n  const preview = document.getElementById(\"preview-tags\");\n  const mk = (title, arr, badge) => {\n    if (!arr.length) return `${title}: —`;\n    return `${title}: ` + arr.map(n => `<span class=\"pill\"><b>${badge}</b> ${n}</span>`).join(\" \");\n  };\n  preview.innerHTML = mk(\"Trafores\", namesO, \"O\") + \" &nbsp; \" + mk(\"Trafares\", namesA, \"A\");\n}\n\n/** App **/\n(async function main(){\n  const catsBox = document.getElementById(\"cats\");\n  const csvOut = document.getElementById(\"csv-output\");\n  const textoOut = document.getElementById(\"texto-output\");\n  const perguntaEl = document.getElementById(\"pergunta\");\n  const pontuacaoEl = document.getElementById(\"pontuacao\");\n  const descricaoEl = document.getElementById(\"descricao\");\n\n  // Carregar data/tracos.csv\n  let data = [];\n  try {\n    const res = await fetch(\"data/tracos.csv\", { cache: \"no-store\" });\n    if (!res.ok) throw new Error(\"HTTP \" + res.status);\n    const txt = await res.text();\n    data = parseCSV(txt);\n  } catch (e) {\n    console.warn(\"Falha ao carregar data/tracos.csv, usando fallback mínimo:\", e);\n    // Fallback mínimo só para demonstração\n    data = [\n      {id:\"42\", tipo:\"O\", nome:\"Clareza\", categoria:\"COMUNICABILIDADE\"},\n      {id:\"168\", tipo:\"A\", nome:\"Prolixidade\", categoria:\"COMUNICABILIDADE\"},\n      {id:\"129\", tipo:\"O\", nome:\"Liderança\", categoria:\"LIDERANÇA\"},\n      {id:\"31\", tipo:\"A\", nome:\"Autoritarismo\", categoria:\"LIDERANÇA\"},\n      {id:\"186\", tipo:\"O\", nome:\"Serenidade\", categoria:\"ANTIEMOCIONALIDADE\"},\n      {id:\"104\", tipo:\"A\", nome:\"Impaciência\", categoria:\"ANTIEMOCIONALIDADE\"},\n    ];\n  }\n\n  // Normalizar e agrupar\n  const grouped = {};\n  data.forEach(row => {\n    const item = {\n      id: String(row.id || \"\").trim(),\n      tipo: String(row.tipo || \"\").trim().toUpperCase(), // O/A\n      nome: String(row.nome || \"\").trim(),\n      categoria: String(row.categoria || \"CONSCIENCIALIDADE\").trim().toUpperCase()\n    };\n    const cat = item.categoria || \"CONSCIENCIALIDADE\";\n    if (!grouped[cat]) grouped[cat] = [];\n    grouped[cat].push(item);\n  });\n\n  // Ordenar itens em cada categoria por (tipo, id numérico)\n  Object.keys(grouped).forEach(cat => {\n    grouped[cat].sort((a,b)=>{\n      const to = a.tipo === \"O\" ? 0 : 1;\n      const bo = b.tipo === \"O\" ? 0 : 1;\n      if (to !== bo) return to - bo;\n      return parseInt(a.id,10) - parseInt(b.id,10);\n    });\n  });\n\n  renderCategories(catsBox, grouped);\n\n  function atualizarPreview() {\n    const { namesO, namesA } = getSelections();\n    renderPreview(namesO, namesA);\n  }\n\n  catsBox.addEventListener(\"change\", atualizarPreview);\n\n  document.getElementById(\"gerar\").addEventListener(\"click\", () => {\n    const pergunta = parseInt(perguntaEl.value, 10);\n    const pontuacao = parseInt(pontuacaoEl.value, 10);\n\n    if (!Number.isInteger(pergunta) || pergunta < 1) {\n      alert(\"Informe um número de situação válido (inteiro >= 1).\");\n      return;\n    }\n    if (!Number.isInteger(pontuacao) || pontuacao < 0 || pontuacao > 20) {\n      alert(\"Pontuação deve ser um inteiro entre 0 e 20.\");\n      return;\n    }\n\n    const { trafores, trafares, namesO, namesA } = getSelections();\n\n    const line = generateCSVLine({ pergunta, pontuacao, traforesIds: trafores, trafaresIds: trafares });\n    csvOut.value = \"pergunta,pontuacao,trafores,trafares\\n\" + line;\n\n    const descrTrafores = namesO.length ? namesO.join(\", \") : \"—\";\n    const descrTrafares = namesA.length ? namesA.join(\", \") : \"—\";\n    const resumo = `Para: pergunta número ${pergunta}, pontuação ${pontuacao}, trafores ${descrTrafores} e trafares ${descrTrafares}.`;\n    textoOut.textContent = resumo;\n\n    atualizarPreview();\n  });\n\n  document.getElementById(\"limpar\").addEventListener(\"click\", () => {\n    perguntaEl.value = \"\";\n    pontuacaoEl.value = \"\";\n    descricaoEl.value = \"\";\n    document.querySelectorAll('#cats input[type=\"checkbox\"]').forEach(el => el.checked = false);\n    csvOut.value = \"\";\n    textoOut.textContent = \"A descrição aparecerá aqui.\";\n    document.getElementById(\"preview-tags\").innerHTML = \"\";\n  });\n\n  document.getElementById(\"copiar\").addEventListener(\"click\", async () => {\n    const v = csvOut.value.trim();\n    if (!v) { alert(\"Nada para copiar ainda.\"); return; }\n    try {\n      await navigator.clipboard.writeText(v);\n      alert(\"CSV copiado para a área de transferência.\");\n    } catch {\n      alert(\"Não foi possível copiar automaticamente. Selecione e copie manualmente.\");\n    }\n  });\n\n  document.getElementById(\"baixar\").addEventListener(\"click\", () => {\n    const v = csvOut.value.trim();\n    if (!v) { alert(\"Nada para baixar ainda.\"); return; }\n    downloadText(\"situacao.csv\", v + \"\\n\");\n  });\n\n})();\n</script>\n\n```\n","srcMarkdownNoYaml":"\n\n---\ntitle: \"Formulário de Situação (Categorias + O/A)\"\nformat: html\ntoc: false\nexecute:\n  eval: false\npage-layout: full\n---\n\n```{=html}\n<style>\n  .card { border: 1px solid #e5e7eb; border-radius: 14px; padding: 16px; margin: 12px 0; box-shadow: 0 2px 8px rgba(0,0,0,.04); }\n  .row { display: grid; grid-template-columns: 1fr 1fr; gap: 16px; }\n  .stack { display: flex; flex-direction: column; gap: 8px; }\n  .muted { color: #6b7280; font-size: .95rem; }\n  .grid-cat { display: grid; grid-template-columns: repeat(auto-fill, minmax(260px, 1fr)); gap: 12px; }\n  .cat { border: 1px solid #e5e7eb; border-radius: 12px; padding: 10px; }\n  .cat h4 { margin: 0 0 6px 0; font-size: 1rem; }\n  .list { display: grid; grid-template-columns: 1fr; gap: 6px; max-height: 300px; overflow: auto; padding-right: 4px; }\n  .item { display: flex; align-items: center; gap: 8px; }\n  .badge { font-size: 0.75rem; border-radius: 9999px; padding: 2px 7px; border: 1px solid transparent; }\n  .badge.O { background: #e7f7ef; color: #065f46; border-color: #bef0d2; }  /* Trafor (O) - verde */\n  .badge.A { background: #fde8e8; color: #7f1d1d; border-color: #f9caca; }  /* Trafar (A) - vermelho */\n  .name { flex: 1; }\n  .actions { display: flex; gap: 8px; flex-wrap: wrap; }\n  button { border: 1px solid #e5e7eb; background: #fff; padding: 8px 12px; border-radius: 10px; cursor: pointer; }\n  button.primary { background: #111827; color: #fff; }\n  textarea { width: 100%; min-height: 80px; }\n  input[type=\"number\"] { width: 140px; }\n  .pill { display:inline-block; padding:2px 8px; border-radius:9999px; border:1px solid #e5e7eb; margin:2px; }\n  .small { font-size: .9rem; }\n</style>\n\n<div class=\"card\">\n  <h2>Parte 1 — Formulário</h2>\n  <p class=\"muted\">Selecione traços por <b>categoria</b>. Trafors (O) e Trafars (A) aparecem misturados, com indicação visual.</p>\n\n  <div class=\"row\">\n    <div class=\"stack\">\n      <label class=\"label\" for=\"pergunta\"><b>Número da situação</b></label>\n      <input id=\"pergunta\" type=\"number\" min=\"1\" step=\"1\" placeholder=\"ex.: 57\">\n    </div>\n    <div class=\"stack\">\n      <label class=\"label\" for=\"pontuacao\"><b>Pontuação (0–20)</b></label>\n      <input id=\"pontuacao\" type=\"number\" min=\"0\" max=\"20\" step=\"1\" placeholder=\"ex.: 4\">\n    </div>\n  </div>\n\n  <div class=\"stack\" style=\"margin-top:12px;\">\n    <label class=\"label\" for=\"descricao\"><b>Descrição da situação</b> (opcional)</label>\n    <textarea id=\"descricao\" placeholder=\"Descreva a situação...\"></textarea>\n  </div>\n\n  <div class=\"stack\" style=\"margin-top:16px;\">\n    <div class=\"label\"><b>Seleção por categoria</b></div>\n    <div id=\"cats\" class=\"grid-cat\" aria-live=\"polite\"></div>\n  </div>\n\n  <div class=\"actions\" style=\"margin-top:12px;\">\n    <button class=\"primary\" id=\"gerar\">Gerar saída</button>\n    <button id=\"limpar\">Limpar seleção</button>\n  </div>\n</div>\n\n<div class=\"card\">\n  <h2>Parte 2 — Saída</h2>\n\n  <div class=\"stack\">\n    <div class=\"label\">Linha CSV</div>\n    <textarea id=\"csv-output\" readonly placeholder=\"pergunta,pontuacao,trafores,trafares\"></textarea>\n    <div class=\"actions\">\n      <button id=\"copiar\">Copiar CSV</button>\n      <button id=\"baixar\">Baixar CSV</button>\n    </div>\n  </div>\n\n  <div class=\"stack\" style=\"margin-top:12px;\">\n    <div class=\"label\">Descrição textual</div>\n    <div id=\"texto-output\" class=\"small muted\">A descrição aparecerá aqui.</div>\n  </div>\n\n  <div class=\"stack\" style=\"margin-top:12px;\">\n    <div class=\"label\">Seleções (pré-visualização)</div>\n    <div id=\"preview-tags\" class=\"small\"></div>\n  </div>\n</div>\n\n<script>\n/** CSV utils **/\nfunction parseCSV(text) {\n  // Simples: separa por linhas e vírgulas (sem aspas internas nos dados).\n  const lines = text.split(/\\r?\\n/).map(l => l.trim()).filter(Boolean);\n  if (!lines.length) return [];\n  const header = lines[0].split(\",\").map(h => h.trim().toLowerCase());\n  return lines.slice(1).map(line => {\n    const cols = line.split(\",\"); // assume sem vírgulas nos nomes/categorias\n    const obj = {};\n    header.forEach((h, i) => obj[h] = (cols[i] ?? \"\").trim());\n    return obj;\n  });\n}\n\nfunction csvEscapeField(s) {\n  if (s == null) return \"\";\n  const needsQuotes = /[\",\\n]/.test(s);\n  let out = String(s).replace(/\"/g, '\"\"');\n  return needsQuotes ? `\"${out}\"` : out;\n}\n\nfunction generateCSVLine({ pergunta, pontuacao, traforesIds, trafaresIds }) {\n  const traforesStr = traforesIds.join(\",\");\n  const trafaresStr = trafaresIds.join(\",\");\n  return [\n    csvEscapeField(pergunta),\n    csvEscapeField(pontuacao),\n    csvEscapeField(traforesStr),\n    csvEscapeField(trafaresStr)\n  ].join(\",\");\n}\n\nfunction downloadText(filename, content) {\n  const blob = new Blob([content], { type: \"text/csv;charset=utf-8\" });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement(\"a\");\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n  URL.revokeObjectURL(url);\n  a.remove();\n}\n\n/** UI helpers **/\nfunction renderCategories(container, grouped) {\n  container.innerHTML = \"\";\n  const catOrder = [\"SOMA\",\"BIOENERGÉTICA\",\"ANTIEMOCIONALIDADE\",\"INVULGARIDADE\",\"LIDERANÇA\",\"COMUNICABILIDADE\",\"PRIORIZAÇÃO\",\"COERÊNCIA\",\"CONSCIENCIALIDADE\",\"UNIVERSALIDADE\",\"OUTROS\"];\n  catOrder.forEach(cat => {\n    const items = grouped[cat];\n    if (!items || !items.length) return;\n    const box = document.createElement(\"div\");\n    box.className = \"cat\";\n    const h = document.createElement(\"h4\");\n    h.textContent = cat;\n    box.appendChild(h);\n    const list = document.createElement(\"div\");\n    list.className = \"list\";\n    items.forEach(item => {\n      const id = `t-${item.id}`;\n      const row = document.createElement(\"label\");\n      row.className = \"item\";\n      row.setAttribute(\"for\", id);\n\n      const cb = document.createElement(\"input\");\n      cb.type = \"checkbox\";\n      cb.id = id;\n      cb.value = item.id;\n      cb.dataset.tipo = item.tipo; // 'O' ou 'A'\n      cb.dataset.nome = item.nome;\n      cb.dataset.categoria = item.categoria;\n\n      const badge = document.createElement(\"span\");\n      badge.className = `badge ${item.tipo}`;\n      badge.textContent = item.tipo; // O ou A\n\n      const span = document.createElement(\"span\");\n      span.className = \"name\";\n      span.textContent = `${item.id} — ${item.nome}`;\n\n      row.appendChild(cb);\n      row.appendChild(badge);\n      row.appendChild(span);\n      list.appendChild(row);\n    });\n    box.appendChild(list);\n    container.appendChild(box);\n  });\n}\n\nfunction getSelections() {\n  const checked = Array.from(document.querySelectorAll('#cats input[type=\"checkbox\"]:checked'));\n  const trafores = [];\n  const trafares = [];\n  const namesO = [];\n  const namesA = [];\n  checked.forEach(cb => {\n    const id = parseInt(cb.value, 10);\n    const tipo = cb.dataset.tipo;\n    const nome = cb.dataset.nome;\n    if (tipo === \"O\") { trafores.push(id); namesO.push(nome); }\n    else { trafares.push(id); namesA.push(nome); }\n  });\n  trafores.sort((a,b)=>a-b);\n  trafares.sort((a,b)=>a-b);\n  return { trafores, trafares, namesO, namesA };\n}\n\nfunction renderPreview(namesO, namesA) {\n  const preview = document.getElementById(\"preview-tags\");\n  const mk = (title, arr, badge) => {\n    if (!arr.length) return `${title}: —`;\n    return `${title}: ` + arr.map(n => `<span class=\"pill\"><b>${badge}</b> ${n}</span>`).join(\" \");\n  };\n  preview.innerHTML = mk(\"Trafores\", namesO, \"O\") + \" &nbsp; \" + mk(\"Trafares\", namesA, \"A\");\n}\n\n/** App **/\n(async function main(){\n  const catsBox = document.getElementById(\"cats\");\n  const csvOut = document.getElementById(\"csv-output\");\n  const textoOut = document.getElementById(\"texto-output\");\n  const perguntaEl = document.getElementById(\"pergunta\");\n  const pontuacaoEl = document.getElementById(\"pontuacao\");\n  const descricaoEl = document.getElementById(\"descricao\");\n\n  // Carregar data/tracos.csv\n  let data = [];\n  try {\n    const res = await fetch(\"data/tracos.csv\", { cache: \"no-store\" });\n    if (!res.ok) throw new Error(\"HTTP \" + res.status);\n    const txt = await res.text();\n    data = parseCSV(txt);\n  } catch (e) {\n    console.warn(\"Falha ao carregar data/tracos.csv, usando fallback mínimo:\", e);\n    // Fallback mínimo só para demonstração\n    data = [\n      {id:\"42\", tipo:\"O\", nome:\"Clareza\", categoria:\"COMUNICABILIDADE\"},\n      {id:\"168\", tipo:\"A\", nome:\"Prolixidade\", categoria:\"COMUNICABILIDADE\"},\n      {id:\"129\", tipo:\"O\", nome:\"Liderança\", categoria:\"LIDERANÇA\"},\n      {id:\"31\", tipo:\"A\", nome:\"Autoritarismo\", categoria:\"LIDERANÇA\"},\n      {id:\"186\", tipo:\"O\", nome:\"Serenidade\", categoria:\"ANTIEMOCIONALIDADE\"},\n      {id:\"104\", tipo:\"A\", nome:\"Impaciência\", categoria:\"ANTIEMOCIONALIDADE\"},\n    ];\n  }\n\n  // Normalizar e agrupar\n  const grouped = {};\n  data.forEach(row => {\n    const item = {\n      id: String(row.id || \"\").trim(),\n      tipo: String(row.tipo || \"\").trim().toUpperCase(), // O/A\n      nome: String(row.nome || \"\").trim(),\n      categoria: String(row.categoria || \"CONSCIENCIALIDADE\").trim().toUpperCase()\n    };\n    const cat = item.categoria || \"CONSCIENCIALIDADE\";\n    if (!grouped[cat]) grouped[cat] = [];\n    grouped[cat].push(item);\n  });\n\n  // Ordenar itens em cada categoria por (tipo, id numérico)\n  Object.keys(grouped).forEach(cat => {\n    grouped[cat].sort((a,b)=>{\n      const to = a.tipo === \"O\" ? 0 : 1;\n      const bo = b.tipo === \"O\" ? 0 : 1;\n      if (to !== bo) return to - bo;\n      return parseInt(a.id,10) - parseInt(b.id,10);\n    });\n  });\n\n  renderCategories(catsBox, grouped);\n\n  function atualizarPreview() {\n    const { namesO, namesA } = getSelections();\n    renderPreview(namesO, namesA);\n  }\n\n  catsBox.addEventListener(\"change\", atualizarPreview);\n\n  document.getElementById(\"gerar\").addEventListener(\"click\", () => {\n    const pergunta = parseInt(perguntaEl.value, 10);\n    const pontuacao = parseInt(pontuacaoEl.value, 10);\n\n    if (!Number.isInteger(pergunta) || pergunta < 1) {\n      alert(\"Informe um número de situação válido (inteiro >= 1).\");\n      return;\n    }\n    if (!Number.isInteger(pontuacao) || pontuacao < 0 || pontuacao > 20) {\n      alert(\"Pontuação deve ser um inteiro entre 0 e 20.\");\n      return;\n    }\n\n    const { trafores, trafares, namesO, namesA } = getSelections();\n\n    const line = generateCSVLine({ pergunta, pontuacao, traforesIds: trafores, trafaresIds: trafares });\n    csvOut.value = \"pergunta,pontuacao,trafores,trafares\\n\" + line;\n\n    const descrTrafores = namesO.length ? namesO.join(\", \") : \"—\";\n    const descrTrafares = namesA.length ? namesA.join(\", \") : \"—\";\n    const resumo = `Para: pergunta número ${pergunta}, pontuação ${pontuacao}, trafores ${descrTrafores} e trafares ${descrTrafares}.`;\n    textoOut.textContent = resumo;\n\n    atualizarPreview();\n  });\n\n  document.getElementById(\"limpar\").addEventListener(\"click\", () => {\n    perguntaEl.value = \"\";\n    pontuacaoEl.value = \"\";\n    descricaoEl.value = \"\";\n    document.querySelectorAll('#cats input[type=\"checkbox\"]').forEach(el => el.checked = false);\n    csvOut.value = \"\";\n    textoOut.textContent = \"A descrição aparecerá aqui.\";\n    document.getElementById(\"preview-tags\").innerHTML = \"\";\n  });\n\n  document.getElementById(\"copiar\").addEventListener(\"click\", async () => {\n    const v = csvOut.value.trim();\n    if (!v) { alert(\"Nada para copiar ainda.\"); return; }\n    try {\n      await navigator.clipboard.writeText(v);\n      alert(\"CSV copiado para a área de transferência.\");\n    } catch {\n      alert(\"Não foi possível copiar automaticamente. Selecione e copie manualmente.\");\n    }\n  });\n\n  document.getElementById(\"baixar\").addEventListener(\"click\", () => {\n    const v = csvOut.value.trim();\n    if (!v) { alert(\"Nada para baixar ainda.\"); return; }\n    downloadText(\"situacao.csv\", v + \"\\n\");\n  });\n\n})();\n</script>\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":false,"output-file":"form-situacao.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","title":"Formulário de Situação (Categorias + O/A)","page-layout":"full"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}