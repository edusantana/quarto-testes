{"title":"Formulário de Situação (Pré-visualização)","markdown":{"yaml":{"title":"Formulário de Situação (Pré-visualização)","format":{"html":{"theme":"cosmo","toc":false}},"execute":{"echo":false,"warning":false,"message":false}},"headingText":"Parte 1 — Preenchimento","containsRefs":false,"markdown":"\n\n::: callout-tip\nEste documento funciona em **pré-visualização HTML**. \nCertifique-se de que os arquivos `trafores-lista.csv` e `trafares-lista.csv` estejam na **mesma pasta** deste `.qmd`.\n:::\n\n\n```{=html}\n<form id=\"form-situacao\" style=\"max-width: 900px;\">\n  <fieldset style=\"border:1px solid #ddd; border-radius:12px; padding:16px; margin-bottom:18px;\">\n    <legend style=\"font-weight:600;\">Dados da Situação</legend>\n\n    <div style=\"display:grid; grid-template-columns: 1fr 1fr; gap: 16px; align-items:start;\">\n      <div>\n        <label for=\"numero\" style=\"display:block; font-weight:600;\">Número da situação (inteiro)</label>\n        <input type=\"number\" id=\"numero\" name=\"numero\" min=\"1\" step=\"1\" required style=\"width:100%; padding:8px;\">\n      </div>\n\n      <div>\n        <label for=\"pontuacao\" style=\"display:block; font-weight:600;\">Pontuação (0–20)</label>\n        <input type=\"number\" id=\"pontuacao\" name=\"pontuacao\" min=\"0\" max=\"20\" step=\"1\" required style=\"width:100%; padding:8px;\">\n      </div>\n\n      <div style=\"grid-column: 1 / -1;\">\n        <label for=\"descricao\" style=\"display:block; font-weight:600;\">Descrição da situação</label>\n        <textarea id=\"descricao\" name=\"descricao\" rows=\"4\" placeholder=\"Descreva a situação…\" style=\"width:100%; padding:8px;\"></textarea>\n      </div>\n    </div>\n  </fieldset>\n\n  <fieldset style=\"border:1px solid #ddd; border-radius:12px; padding:16px; margin-bottom:18px;\">\n    <legend style=\"font-weight:600;\">Seleção de Trafores</legend>\n    <div id=\"lista-trafores\" style=\"display:grid; grid-template-columns: repeat(auto-fill, minmax(240px, 1fr)); gap: 8px;\">\n      <!-- checkboxes carregados dinamicamente -->\n    </div>\n  </fieldset>\n\n  <fieldset style=\"border:1px solid #ddd; border-radius:12px; padding:16px; margin-bottom:18px;\">\n    <legend style=\"font-weight:600;\">Seleção de Trafares</legend>\n    <div id=\"lista-trafares\" style=\"display:grid; grid-template-columns: repeat(auto-fill, minmax(240px, 1fr)); gap: 8px;\">\n      <!-- checkboxes carregados dinamicamente -->\n    </div>\n  </fieldset>\n\n  <div style=\"display:flex; gap:12px; flex-wrap:wrap;\">\n    <button type=\"button\" id=\"btn-gerar\" style=\"padding:10px 16px; border-radius:10px; border:1px solid #ccc; background:#f7f7f7; cursor:pointer;\">\n      Gerar saída (Parte 2)\n    </button>\n    <button type=\"reset\" id=\"btn-limpar\" style=\"padding:10px 16px; border-radius:10px; border:1px solid #ccc; background:#fff; cursor:pointer;\">\n      Limpar\n    </button>\n  </div>\n</form>\n```\n\n## Parte 2\n\n```{=html}\n<div id=\"saida\" style=\"margin-top: 18px;\">\n  <h3>Prévia do CSV</h3>\n  <pre id=\"csv-preview\" style=\"background:#f8f9fa; padding:12px; border:1px solid #e9ecef; border-radius:8px; overflow:auto;\">pergunta,pontuacao,trafores,trafares\n</pre>\n\n  <div style=\"display:flex; gap:12px; flex-wrap:wrap; margin: 8px 0 18px;\">\n    <button type=\"button\" id=\"btn-copiar\" style=\"padding:10px 16px; border-radius:10px; border:1px solid #ccc; background:#f7f7f7; cursor:pointer;\">Copiar CSV</button>\n    <a id=\"download-link\" download=\"situacao.csv\" style=\"padding:10px 16px; border-radius:10px; border:1px solid #ccc; background:#fff; cursor:pointer; text-decoration:none;\">Baixar CSV</a>\n  </div>\n\n  <h3>Resumo Leigo</h3>\n  <div id=\"resumo\" style=\"background:#fff; padding:12px; border:1px solid #e9ecef; border-radius:8px;\">\n    <!-- frase gerada aqui -->\n  </div>\n</div>\n```\n\n\n```{=html}\n<script>\n// --- utilidades ---\nfunction parseCSVSimple(text) {\n  // CSV simples \"id,nome\" por linha\n  // Retorna array de objetos: [{id: \"1\", nome: \"Abnegação\"}, ...]\n  return text\n    .split(/\\r?\\n/)\n    .map(l => l.trim())\n    .filter(l => l.length > 0)\n    .map(l => {\n      // divide apenas na primeira vírgula (caso o nome contenha vírgulas no futuro)\n      const idx = l.indexOf(\",\");\n      if (idx === -1) return null;\n      const id = l.slice(0, idx).trim();\n      const nome = l.slice(idx + 1).trim();\n      if (!id || !nome) return null;\n      return { id, nome };\n    })\n    .filter(Boolean);\n}\n\nasync function carregarListaCSV(path) {\n  const resp = await fetch(path, { cache: \"no-store\" });\n  if (!resp.ok) throw new Error(`Falha ao carregar ${path}: ${resp.status}`);\n  const txt = await resp.text();\n  return parseCSVSimple(txt);\n}\n\nfunction popularCheckboxes(containerId, itens, groupName) {\n  const cont = document.getElementById(containerId);\n  cont.innerHTML = \"\";\n  itens.forEach(it => {\n    const id = `${groupName}-${it.id}`;\n    const wrap = document.createElement(\"label\");\n    wrap.style.display = \"flex\";\n    wrap.style.alignItems = \"center\";\n    wrap.style.gap = \"8px\";\n\n    const cb = document.createElement(\"input\");\n    cb.type = \"checkbox\";\n    cb.value = it.id;\n    cb.name = groupName;\n    cb.id = id;\n\n    const span = document.createElement(\"span\");\n    span.textContent = `${it.id} — ${it.nome}`;\n\n    wrap.appendChild(cb);\n    wrap.appendChild(span);\n    cont.appendChild(wrap);\n  });\n}\n\nfunction coletarSelecionados(name) {\n  return Array.from(document.querySelectorAll(`input[name=\"${name}\"]:checked`))\n              .map(el => el.value)\n              .sort((a,b) => Number(a) - Number(b));\n}\n\nfunction mapearIdsParaNomes(ids, mapa) {\n  return ids.map(id => mapa.get(id)).filter(Boolean);\n}\n\nfunction criarCSVLine(pergunta, pontuacao, idsTrafores, idsTrafares) {\n  // campos: pergunta,pontuacao,trafores,trafares\n  // trafores/trafares entre aspas, separados por vírgula\n  const traforesCampo = `\"${idsTrafores.join(\",\")}\"`;\n  const trafaresCampo = `\"${idsTrafares.join(\",\")}\"`;\n  return `${pergunta},${pontuacao},${traforesCampo},${trafaresCampo}`;\n}\n\nfunction atualizarSaida({ pergunta, pontuacao, idsTrafores, idsTrafares, nomesTrafores, nomesTrafares }) {\n  const header = \"pergunta,pontuacao,trafores,trafares\";\n  const line = criarCSVLine(pergunta, pontuacao, idsTrafores, idsTrafares);\n\n  const pre = document.getElementById(\"csv-preview\");\n  pre.textContent = `${header}\\n${line}`;\n\n  // link de download\n  const blob = new Blob([`${header}\\n${line}\\n`], { type: \"text/csv;charset=utf-8\" });\n  const url = URL.createObjectURL(blob);\n  const a = document.getElementById(\"download-link\");\n  a.href = url;\n\n  // resumo\n  const frase = `Para: pergunta número ${pergunta}, pontuação ${pontuacao}, trafores ${nomesTrafores.join(\", \")} e trafares ${nomesTrafares.join(\", \")}.`;\n  document.getElementById(\"resumo\").textContent = frase;\n}\n\nfunction validarCamposObrigatorios(numero, pontuacao) {\n  if (!numero || Number.isNaN(Number(numero)) || Number(numero) < 1) {\n    alert(\"Informe um número de situação válido (inteiro ≥ 1).\");\n    return false;\n  }\n  if (Number.isNaN(Number(pontuacao)) || Number(pontuacao) < 0 || Number(pontuacao) > 20) {\n    alert(\"Informe uma pontuação entre 0 e 20.\");\n    return false;\n  }\n  return true;\n}\n\n// --- inicialização ---\n(async function init() {\n  try {\n    const trafores = await carregarListaCSV(\"trafores-lista.csv\");\n    const trafares = await carregarListaCSV(\"trafares-lista.csv\");\n\n    // guarda mapas id->nome para montar frase\n    const mapaTrafores = new Map(trafores.map(t => [t.id, t.nome]));\n    const mapaTrafares = new Map(trafares.map(t => [t.id, t.nome]));\n\n    popularCheckboxes(\"lista-trafores\", trafores, \"trafores\");\n    popularCheckboxes(\"lista-trafares\", trafares, \"trafares\");\n\n    // eventos\n    document.getElementById(\"btn-gerar\").addEventListener(\"click\", () => {\n      const numero = (document.getElementById(\"numero\").value || \"\").trim();\n      const pontuacao = (document.getElementById(\"pontuacao\").value || \"\").trim();\n      // descrição não entra no CSV, mas você pode usar no resumo se desejar\n      const _descricao = (document.getElementById(\"descricao\").value || \"\").trim();\n\n      if (!validarCamposObrigatorios(numero, pontuacao)) return;\n\n      const idsTrafores = coletarSelecionados(\"trafores\");\n      const idsTrafares = coletarSelecionados(\"trafares\");\n\n      const nomesTrafores = mapearIdsParaNomes(idsTrafores, mapaTrafores);\n      const nomesTrafares = mapearIdsParaNomes(idsTrafares, mapaTrafares);\n\n      atualizarSaida({\n        pergunta: Number(numero),\n        pontuacao: Number(pontuacao),\n        idsTrafores,\n        idsTrafares,\n        nomesTrafores,\n        nomesTrafares\n      });\n    });\n\n    document.getElementById(\"btn-copiar\").addEventListener(\"click\", async () => {\n      const txt = document.getElementById(\"csv-preview\").textContent;\n      try {\n        await navigator.clipboard.writeText(txt);\n        alert(\"CSV copiado para a área de transferência!\");\n      } catch (e) {\n        alert(\"Não foi possível copiar. Selecione e copie manualmente.\");\n      }\n    });\n\n    document.getElementById(\"btn-limpar\").addEventListener(\"click\", () => {\n      // limpa saída também\n      document.getElementById(\"csv-preview\").textContent = \"pergunta,pontuacao,trafores,trafares\\n\";\n      document.getElementById(\"resumo\").textContent = \"\";\n      // desmarca checkboxes manualmente porque reset nem sempre atinge dinamicamente\n      document.querySelectorAll('input[name=\"trafores\"], input[name=\"trafares\"]').forEach(cb => { cb.checked = false; });\n    });\n  } catch (err) {\n    console.error(err);\n    alert(\"Erro ao carregar listas de trafores/trafares. Verifique se os CSVs estão no mesmo diretório.\");\n  }\n})();\n</script>\n```","srcMarkdownNoYaml":"\n\n::: callout-tip\nEste documento funciona em **pré-visualização HTML**. \nCertifique-se de que os arquivos `trafores-lista.csv` e `trafares-lista.csv` estejam na **mesma pasta** deste `.qmd`.\n:::\n\n## Parte 1 — Preenchimento\n\n```{=html}\n<form id=\"form-situacao\" style=\"max-width: 900px;\">\n  <fieldset style=\"border:1px solid #ddd; border-radius:12px; padding:16px; margin-bottom:18px;\">\n    <legend style=\"font-weight:600;\">Dados da Situação</legend>\n\n    <div style=\"display:grid; grid-template-columns: 1fr 1fr; gap: 16px; align-items:start;\">\n      <div>\n        <label for=\"numero\" style=\"display:block; font-weight:600;\">Número da situação (inteiro)</label>\n        <input type=\"number\" id=\"numero\" name=\"numero\" min=\"1\" step=\"1\" required style=\"width:100%; padding:8px;\">\n      </div>\n\n      <div>\n        <label for=\"pontuacao\" style=\"display:block; font-weight:600;\">Pontuação (0–20)</label>\n        <input type=\"number\" id=\"pontuacao\" name=\"pontuacao\" min=\"0\" max=\"20\" step=\"1\" required style=\"width:100%; padding:8px;\">\n      </div>\n\n      <div style=\"grid-column: 1 / -1;\">\n        <label for=\"descricao\" style=\"display:block; font-weight:600;\">Descrição da situação</label>\n        <textarea id=\"descricao\" name=\"descricao\" rows=\"4\" placeholder=\"Descreva a situação…\" style=\"width:100%; padding:8px;\"></textarea>\n      </div>\n    </div>\n  </fieldset>\n\n  <fieldset style=\"border:1px solid #ddd; border-radius:12px; padding:16px; margin-bottom:18px;\">\n    <legend style=\"font-weight:600;\">Seleção de Trafores</legend>\n    <div id=\"lista-trafores\" style=\"display:grid; grid-template-columns: repeat(auto-fill, minmax(240px, 1fr)); gap: 8px;\">\n      <!-- checkboxes carregados dinamicamente -->\n    </div>\n  </fieldset>\n\n  <fieldset style=\"border:1px solid #ddd; border-radius:12px; padding:16px; margin-bottom:18px;\">\n    <legend style=\"font-weight:600;\">Seleção de Trafares</legend>\n    <div id=\"lista-trafares\" style=\"display:grid; grid-template-columns: repeat(auto-fill, minmax(240px, 1fr)); gap: 8px;\">\n      <!-- checkboxes carregados dinamicamente -->\n    </div>\n  </fieldset>\n\n  <div style=\"display:flex; gap:12px; flex-wrap:wrap;\">\n    <button type=\"button\" id=\"btn-gerar\" style=\"padding:10px 16px; border-radius:10px; border:1px solid #ccc; background:#f7f7f7; cursor:pointer;\">\n      Gerar saída (Parte 2)\n    </button>\n    <button type=\"reset\" id=\"btn-limpar\" style=\"padding:10px 16px; border-radius:10px; border:1px solid #ccc; background:#fff; cursor:pointer;\">\n      Limpar\n    </button>\n  </div>\n</form>\n```\n\n## Parte 2\n\n```{=html}\n<div id=\"saida\" style=\"margin-top: 18px;\">\n  <h3>Prévia do CSV</h3>\n  <pre id=\"csv-preview\" style=\"background:#f8f9fa; padding:12px; border:1px solid #e9ecef; border-radius:8px; overflow:auto;\">pergunta,pontuacao,trafores,trafares\n</pre>\n\n  <div style=\"display:flex; gap:12px; flex-wrap:wrap; margin: 8px 0 18px;\">\n    <button type=\"button\" id=\"btn-copiar\" style=\"padding:10px 16px; border-radius:10px; border:1px solid #ccc; background:#f7f7f7; cursor:pointer;\">Copiar CSV</button>\n    <a id=\"download-link\" download=\"situacao.csv\" style=\"padding:10px 16px; border-radius:10px; border:1px solid #ccc; background:#fff; cursor:pointer; text-decoration:none;\">Baixar CSV</a>\n  </div>\n\n  <h3>Resumo Leigo</h3>\n  <div id=\"resumo\" style=\"background:#fff; padding:12px; border:1px solid #e9ecef; border-radius:8px;\">\n    <!-- frase gerada aqui -->\n  </div>\n</div>\n```\n\n\n```{=html}\n<script>\n// --- utilidades ---\nfunction parseCSVSimple(text) {\n  // CSV simples \"id,nome\" por linha\n  // Retorna array de objetos: [{id: \"1\", nome: \"Abnegação\"}, ...]\n  return text\n    .split(/\\r?\\n/)\n    .map(l => l.trim())\n    .filter(l => l.length > 0)\n    .map(l => {\n      // divide apenas na primeira vírgula (caso o nome contenha vírgulas no futuro)\n      const idx = l.indexOf(\",\");\n      if (idx === -1) return null;\n      const id = l.slice(0, idx).trim();\n      const nome = l.slice(idx + 1).trim();\n      if (!id || !nome) return null;\n      return { id, nome };\n    })\n    .filter(Boolean);\n}\n\nasync function carregarListaCSV(path) {\n  const resp = await fetch(path, { cache: \"no-store\" });\n  if (!resp.ok) throw new Error(`Falha ao carregar ${path}: ${resp.status}`);\n  const txt = await resp.text();\n  return parseCSVSimple(txt);\n}\n\nfunction popularCheckboxes(containerId, itens, groupName) {\n  const cont = document.getElementById(containerId);\n  cont.innerHTML = \"\";\n  itens.forEach(it => {\n    const id = `${groupName}-${it.id}`;\n    const wrap = document.createElement(\"label\");\n    wrap.style.display = \"flex\";\n    wrap.style.alignItems = \"center\";\n    wrap.style.gap = \"8px\";\n\n    const cb = document.createElement(\"input\");\n    cb.type = \"checkbox\";\n    cb.value = it.id;\n    cb.name = groupName;\n    cb.id = id;\n\n    const span = document.createElement(\"span\");\n    span.textContent = `${it.id} — ${it.nome}`;\n\n    wrap.appendChild(cb);\n    wrap.appendChild(span);\n    cont.appendChild(wrap);\n  });\n}\n\nfunction coletarSelecionados(name) {\n  return Array.from(document.querySelectorAll(`input[name=\"${name}\"]:checked`))\n              .map(el => el.value)\n              .sort((a,b) => Number(a) - Number(b));\n}\n\nfunction mapearIdsParaNomes(ids, mapa) {\n  return ids.map(id => mapa.get(id)).filter(Boolean);\n}\n\nfunction criarCSVLine(pergunta, pontuacao, idsTrafores, idsTrafares) {\n  // campos: pergunta,pontuacao,trafores,trafares\n  // trafores/trafares entre aspas, separados por vírgula\n  const traforesCampo = `\"${idsTrafores.join(\",\")}\"`;\n  const trafaresCampo = `\"${idsTrafares.join(\",\")}\"`;\n  return `${pergunta},${pontuacao},${traforesCampo},${trafaresCampo}`;\n}\n\nfunction atualizarSaida({ pergunta, pontuacao, idsTrafores, idsTrafares, nomesTrafores, nomesTrafares }) {\n  const header = \"pergunta,pontuacao,trafores,trafares\";\n  const line = criarCSVLine(pergunta, pontuacao, idsTrafores, idsTrafares);\n\n  const pre = document.getElementById(\"csv-preview\");\n  pre.textContent = `${header}\\n${line}`;\n\n  // link de download\n  const blob = new Blob([`${header}\\n${line}\\n`], { type: \"text/csv;charset=utf-8\" });\n  const url = URL.createObjectURL(blob);\n  const a = document.getElementById(\"download-link\");\n  a.href = url;\n\n  // resumo\n  const frase = `Para: pergunta número ${pergunta}, pontuação ${pontuacao}, trafores ${nomesTrafores.join(\", \")} e trafares ${nomesTrafares.join(\", \")}.`;\n  document.getElementById(\"resumo\").textContent = frase;\n}\n\nfunction validarCamposObrigatorios(numero, pontuacao) {\n  if (!numero || Number.isNaN(Number(numero)) || Number(numero) < 1) {\n    alert(\"Informe um número de situação válido (inteiro ≥ 1).\");\n    return false;\n  }\n  if (Number.isNaN(Number(pontuacao)) || Number(pontuacao) < 0 || Number(pontuacao) > 20) {\n    alert(\"Informe uma pontuação entre 0 e 20.\");\n    return false;\n  }\n  return true;\n}\n\n// --- inicialização ---\n(async function init() {\n  try {\n    const trafores = await carregarListaCSV(\"trafores-lista.csv\");\n    const trafares = await carregarListaCSV(\"trafares-lista.csv\");\n\n    // guarda mapas id->nome para montar frase\n    const mapaTrafores = new Map(trafores.map(t => [t.id, t.nome]));\n    const mapaTrafares = new Map(trafares.map(t => [t.id, t.nome]));\n\n    popularCheckboxes(\"lista-trafores\", trafores, \"trafores\");\n    popularCheckboxes(\"lista-trafares\", trafares, \"trafares\");\n\n    // eventos\n    document.getElementById(\"btn-gerar\").addEventListener(\"click\", () => {\n      const numero = (document.getElementById(\"numero\").value || \"\").trim();\n      const pontuacao = (document.getElementById(\"pontuacao\").value || \"\").trim();\n      // descrição não entra no CSV, mas você pode usar no resumo se desejar\n      const _descricao = (document.getElementById(\"descricao\").value || \"\").trim();\n\n      if (!validarCamposObrigatorios(numero, pontuacao)) return;\n\n      const idsTrafores = coletarSelecionados(\"trafores\");\n      const idsTrafares = coletarSelecionados(\"trafares\");\n\n      const nomesTrafores = mapearIdsParaNomes(idsTrafores, mapaTrafores);\n      const nomesTrafares = mapearIdsParaNomes(idsTrafares, mapaTrafares);\n\n      atualizarSaida({\n        pergunta: Number(numero),\n        pontuacao: Number(pontuacao),\n        idsTrafores,\n        idsTrafares,\n        nomesTrafores,\n        nomesTrafares\n      });\n    });\n\n    document.getElementById(\"btn-copiar\").addEventListener(\"click\", async () => {\n      const txt = document.getElementById(\"csv-preview\").textContent;\n      try {\n        await navigator.clipboard.writeText(txt);\n        alert(\"CSV copiado para a área de transferência!\");\n      } catch (e) {\n        alert(\"Não foi possível copiar. Selecione e copie manualmente.\");\n      }\n    });\n\n    document.getElementById(\"btn-limpar\").addEventListener(\"click\", () => {\n      // limpa saída também\n      document.getElementById(\"csv-preview\").textContent = \"pergunta,pontuacao,trafores,trafares\\n\";\n      document.getElementById(\"resumo\").textContent = \"\";\n      // desmarca checkboxes manualmente porque reset nem sempre atinge dinamicamente\n      document.querySelectorAll('input[name=\"trafores\"], input[name=\"trafares\"]').forEach(cb => { cb.checked = false; });\n    });\n  } catch (err) {\n    console.error(err);\n    alert(\"Erro ao carregar listas de trafores/trafares. Verifique se os CSVs estão no mesmo diretório.\");\n  }\n})();\n</script>\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":false,"output-file":"quarto-testes.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","title":"Formulário de Situação (Pré-visualização)","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}